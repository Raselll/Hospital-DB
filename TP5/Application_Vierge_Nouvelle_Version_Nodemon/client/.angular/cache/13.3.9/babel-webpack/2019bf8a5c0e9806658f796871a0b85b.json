{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n}; // À DÉCOMMENTER ET À UTILISER LORSQUE VOTRE COMMUNICATION EST IMPLÉMENTÉE\n\n\nimport { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet CommunicationService = class CommunicationService {\n  constructor(http) {\n    this.http = http; // À DÉCOMMENTER ET À UTILISER LORSQUE VOTRE COMMUNICATION EST IMPLÉMENTÉE\n\n    this.BASE_URL = \"http://localhost:3000/database\";\n    this._listeners = new Subject();\n  }\n\n  getMedecins() {\n    return this.http.get(`${this.BASE_URL}/medecins`);\n  }\n\n  listen() {\n    return this._listeners.asObservable();\n  }\n\n  filter(filterBy) {\n    this._listeners.next(filterBy);\n  }\n\n};\n\nCommunicationService.ɵfac = function CommunicationService_Factory(t) {\n  return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommunicationService,\n  factory: CommunicationService.ɵfac,\n  providedIn: 'root'\n});\nCommunicationService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [HttpClient])], CommunicationService);\nexport { CommunicationService };","map":null,"metadata":{},"sourceType":"module"}