{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { CommunicationService } from '../services/communication.service';\nlet ModificationComponent = class ModificationComponent {\n  constructor(communicationService) {\n    this.communicationService = communicationService;\n    this.medecins = [];\n    this.isEditing = {};\n  } // ngOnInit(): void {\n  //   this.communicationService.getMedecins().subscribe((medecins: Medecins[]) => {\n  //     this.medecins = medecins;\n  //     // Initialiser le statut d'édition pour chaque médecin à faux\n  //     this.medecins.forEach(medecin => {\n  //       this.isEditing[medecin.idMedecin] = false;\n  //     });\n  //   });\n  // }\n\n\n  ngOnInit() {\n    // Récupération des médecins à partir du service de communication\n    this.communicationService.getMedecins().subscribe(medecins => {\n      this.medecins = medecins;\n    }); // Récupération des médecins ajoutés à partir du stockage local\n\n    const savedMedecins = localStorage.getItem(\"medecinsAjoutes\");\n\n    if (savedMedecins) {\n      this.medecins = JSON.parse(savedMedecins);\n    }\n  }\n\n  toggleEdit(id) {\n    this.isEditing[id] = !this.isEditing[id];\n  }\n\n  saveChanges(medecin) {\n    if (this.isEditing[medecin.idMedecin]) {\n      this.communicationService.modifierMedecin(medecin).subscribe(() => {\n        console.log('Médecin modifié avec succès');\n        this.toggleEdit(medecin.idMedecin); // Désactiver le mode d'édition\n      }, error => {\n        console.error('Erreur lors de la modification du médecin', error);\n      });\n    }\n  }\n\n};\nModificationComponent = __decorate([Component({\n  selector: 'app-modification',\n  templateUrl: './modification.component.html',\n  styleUrls: ['./modification.component.css']\n}), __metadata(\"design:paramtypes\", [CommunicationService])], ModificationComponent);\nexport { ModificationComponent };","map":null,"metadata":{},"sourceType":"module"}