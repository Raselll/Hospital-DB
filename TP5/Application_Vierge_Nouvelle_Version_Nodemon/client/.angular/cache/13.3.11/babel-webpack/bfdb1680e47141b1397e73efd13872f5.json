{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar _a;\n\nimport { Component } from \"@angular/core\";\nlet AjoutComponent = class AjoutComponent {\n  constructor(communicationService) {\n    this.communicationService = communicationService;\n    this.medecin = {\n      idMedecin: '0',\n      prenom: 'Marie',\n      nom: 'Rousseau',\n      specialite: 'Dermatologie',\n      anneesExperience: '8',\n      idService: '3'\n    };\n    this.medecinsAjoutes = [];\n    this.idMedecinInvalide = false;\n    this.prenomInvalide = false;\n    this.nomInvalide = false;\n    this.annneesExperienceInvalide = false;\n    this.idServiceInvalide = false;\n  }\n\n  formValide() {\n    return this.medecin.idMedecin && this.medecin.prenom && this.medecin.nom && this.medecin.specialite && this.medecin.anneesExperience && this.medecin.idService;\n  }\n\n  validerNombre(event, champ) {\n    const caractereValide = /[0-9]/;\n    const inputChar = String.fromCharCode(event.charCode);\n    const estValide = caractereValide.test(inputChar);\n    let message = '';\n\n    if (champ === 'idMedecin') {\n      this.idMedecinInvalide = !estValide;\n      message = 'Veuillez entrer uniquement des chiffres pour l\\'identifiant du médecin.';\n    }\n\n    if (!estValide) {\n      event.preventDefault();\n      alert(message);\n    }\n  }\n\n  validerLettres(event, champ) {\n    const pattern = /[a-zA-Z]/;\n    const inputChar = String.fromCharCode(event.charCode);\n    const estValide = pattern.test(inputChar);\n    let message = '';\n\n    if (champ === 'prenom') {\n      this.prenomInvalide = !estValide;\n      message = 'Veuillez entrer uniquement des lettres pour le prénom.';\n    } else if (champ === 'nom') {\n      this.nomInvalide = !estValide;\n      message = 'Veuillez entrer uniquement des lettres pour le nom.';\n    }\n\n    if (!estValide) {\n      event.preventDefault();\n      alert(message);\n    }\n  }\n\n  ajouterMedecin() {\n    // const medecinsValides = [\n    //   { idMedecin: 0, prenom: 'Marie', nom: 'Rousseau', specialite: 'Dermatologie', anneesExperience: 8, idService: 3 },\n    //   { idMedecin: 1, prenom: 'Philippe', nom: 'Lemelin', specialite: 'Neurologie', anneesExperience: 6, idService: 4 },\n    //   { idMedecin: 2, prenom: 'Valérie', nom: 'Bélanger', specialite: 'Ophtalmologie', anneesExperience: 10, idService: 1 },\n    //   { idMedecin: 3, prenom: 'Alex', nom: 'Michaud', specialite: 'Orthopédie', anneesExperience: 12, idService: 2 },\n    //   { idMedecin: 4, prenom: 'Nathalie', nom: 'Gagné', specialite: 'Psychiatrie', anneesExperience: 9, idService: 3 },\n    //   { idMedecin: 5, prenom: 'Simon', nom: 'Tremblay', specialite: 'Cardiologie', anneesExperience: 15, idService: 4 },\n    //   { idMedecin: 6, prenom: 'Audrey', nom: 'Beaulieu', specialite: 'Pédiatrie', anneesExperience: 7, idService: 1 },\n    //   { idMedecin: 7, prenom: 'David', nom: 'Fournier', specialite: 'Chirurgie', anneesExperience: 11, idService: 2 },\n    //   { idMedecin: 8, prenom: 'Isabelle', nom: 'Lapointe', specialite: 'Gynécologie', anneesExperience: 14, idService: 3 },\n    //   { idMedecin: 9, prenom: 'François', nom: 'Martel', specialite: 'Radiologie', anneesExperience: 5, idService: 4 },\n    // ];\n    const medecinsValides = [this.communicationService.getMedecins().subscribe(medecin => {\n      this.medecin = medecin;\n    })];\n    const nouveauMedecin = {\n      idMedecin: parseInt(this.medecin.idMedecin),\n      prenom: this.medecin.prenom,\n      nom: this.medecin.nom,\n      specialite: this.medecin.specialite,\n      anneesExperience: parseInt(this.medecin.anneesExperience),\n      idService: parseInt(this.medecin.idService.split(' ')[0]) // Récupère l'id du service\n\n    };\n    const correspondance = medecinsValides.some(medecinValide => JSON.stringify(medecinValide) === JSON.stringify(nouveauMedecin));\n\n    if (correspondance) {\n      this.medecinsAjoutes.push(Object.assign({}, this.medecin));\n      this.medecin = {\n        idMedecin: '',\n        prenom: '',\n        nom: '',\n        specialite: '',\n        anneesExperience: '',\n        idService: ''\n      };\n    } else {\n      alert('Les données du médecin à ajouter ne correspondent pas avec un dans la base de donnés.');\n    }\n  }\n\n  ngOnInit() {}\n\n};\nAjoutComponent = __decorate([Component({\n  selector: \"app-ajout\",\n  templateUrl: \"./ajout.component.html\",\n  styleUrls: [\"./ajout.component.css\"]\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof CommunicationService !== \"undefined\" && CommunicationService) === \"function\" ? _a : Object])], AjoutComponent);\nexport { AjoutComponent };","map":null,"metadata":{},"sourceType":"module"}